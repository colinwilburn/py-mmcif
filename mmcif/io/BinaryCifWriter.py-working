##
# File: BinaryCifWrite.py
# Date: 19-Apr-2021  jdw
#
#  Write methods and encoders for binary CIF serialization.
#
#  Updates:
#
##

import logging
import struct
import sys
import msgpack

try:
    from urllib.parse import urlsplit
except Exception:
    from urlparse import urlsplit

logger = logging.getLogger(__name__)

# ------
# if sys.version_info[0] >= 3:
if False:

    def _decodeBytes(bs):
        return bs.decode("ascii")

    def _encode_str(s):
        return s.encode("ascii")


else:

    def _decodeBytes(bs):
        return bs

    def _encode_str(s):
        return s


# -------

#
# ByteArray types
# https://github.com/molstar/BinaryCIF/blob/master/encoding.md
#
_Int8 = 1
_Int16 = 2
_Int32 = 3
_Uint8 = 4
_Uint16 = 5
_Uint32 = 6
_Float32 = 32
_Float64 = 33


class BinaryCifWriter(object):
    def __init__(self, dictionaryApi, useByteEncoding=False, defaultEncoding="utf-8", allString=False):
        self.__version = "0.01"
        self.__useByteEncoding = useByteEncoding
        self.__defaultEncoding = defaultEncoding
        self.__allString = allString
        self.__dApi = dictionaryApi

    def serialize(self, filePath, containerList):
        try:
            blocks = []
            for container in containerList:
                name = container.getName()
                block = {b"header": self.__toBytes(name), b"categories": []}
                categories = block[b"categories"]
                blocks.append(block)
                for catName in container.getObjNameList():
                    cObj = container.getObj(catName)
                    rowCount = cObj.getRowCount()
                    # materialize columns -
                    cols = []
                    for ii, atName in enumerate(cObj.getAttributeList()):
                        colValL = cObj.getColumn(ii)
                        dataType = "string"
                        if not self.__allString:
                            cifDataType = self.__dApi.getTypeCode(catName, atName)
                            cifPrimitiveType = self.__dApi.getTypePrimitive(catName, atName)
                            if cifPrimitiveType == "numb":
                                dataType = "integer" if "int" in cifDataType else "float"
                                castD = {"integer": int, "float": float}
                                for jj in range(len(colValL)):
                                    try:
                                        colValL[jj] = castD[dataType](colValL[jj])
                                    except Exception:
                                        pass

                        logger.debug("catName %r atName %r dataType %r", catName, atName, dataType)
                        mask, encdata, encs = self.__encodeColumnData(colValL, dataType)
                        cols.append({b"name": self.__toBytes(atName), b"mask": mask, b"data": {b"data": encdata, b"encoding": encs}})
                    categories.append({b"name": self.__toBytes("_" + catName), b"columns": cols, b"rowCount": rowCount})
            #
            data = {b"version": self.__toBytes(self.__version), b"encoder": b"python-mmcif library", b"dataBlocks": blocks}
            with open(filePath, "wb") as ofh:
                msgpack.pack(data, ofh)
        except Exception as e:
            logger.exception("Failing with %s", str(e))
        return

    def __encodeColumnData(self, colData, dataType):
        colMaskDict = {}
        encM = BinaryCifMaskedEncoders()
        enc = BinaryCifEncoders()
        #
        maskEncoderList = ["Delta", "RunLength", "ByteArray"]
        # masked_encoder = {str: "StringArrayMasked", int: "IntArrayMasked", float: "FloatArrayMasked"}
        typeEncoderD = {"string": "StringArrayMasked", "integer": "IntArrayMasked", "float": "FloatArrayMasked"}
        # tmask, typ = encM.get_mask_and_type(data)
        colMaskList = encM.getMask(colData)
        # if False:
        #    logger.info("dataType %r data %r mask %r tmask %r", dataType, len(data) if data else None, len(mask) if mask else None, len(tmask) if tmask else None)
        #    if tmask and mask:
        #        for ii, tup in enumerate(zip(mask, tmask)):
        #            if tup[0] != tup[1]:
        #                logger.info("ii %d  %r %r", ii, tup[0], tup[1])
        dataEncType = typeEncoderD[dataType]
        # encType = masked_encoder[typ]
        # if dataEncType != encType:
        #    logger.info("data encoding type differ (%r) %r  old (%r) %r", dataType, dataEncType, typ, encType)
        #
        # encdata, encs = encM.encode(data, mask, encType)
        colDataEncoded, colDataEncodingDictL = encM.encode(colData, colMaskList, dataEncType)
        if colMaskList:
            maskEncoded, maskEncodingDictL = enc.encode(colMaskList, maskEncoderList)
            colMaskDict = {b"data": maskEncoded, b"encoding": maskEncodingDictL}
        return colMaskDict, colDataEncoded, colDataEncodingDictL

    def __toBytes(self, strVal):
        try:
            return strVal.encode(self.__defaultEncoding) if self.__useByteEncoding else strVal
        except (UnicodeDecodeError, AttributeError):
            logger.exception("Bad type for %r", strVal)
            return strVal

    def __fromBytes(self, byteVal):
        try:
            return byteVal.decode(self.__defaultEncoding) if self.__useByteEncoding else byteVal
        except (UnicodeDecodeError, AttributeError):
            logger.exception("Bad type for %r", byteVal)
            return byteVal


class BinaryCifEncoders(object):
    """Binary CIF encoders"""

    struct_map = {
        _Int8: "b",
        _Int16: "h",
        _Int32: "i",
        _Uint8: "B",
        _Uint16: "H",
        _Uint32: "I",
        _Float32: "f",
        _Float64: "d",
    }

    def __init__(self):
        pass

    def __get_int_float_type(self, data):
        """Determine the int/float type of the given data"""
        # If anything is float, treat everything as single-precision float
        for d in data:
            if isinstance(d, float):
                return _Float32
        # Otherwise, figure out the most appropriate int type
        min_val = min(data)
        max_val = max(data)
        if min_val >= 0:
            # Unsigned types
            for typ, limit in [(_Uint8, 0xFF), (_Uint16, 0xFFFF), (_Uint32, 0xFFFFFFFF)]:
                if max_val <= limit:
                    return typ
        else:
            # Signed types
            for typ, up_limit in [(_Int8, 0x7F), (_Int16, 0x7FFF), (_Int32, 0x7FFFFFFF)]:
                low_limit = -up_limit - 1
                if min_val >= low_limit and max_val <= up_limit:
                    return typ
        raise TypeError("Cannot represent data as BinaryCIF")

    def byteArrayEncoder(self, data):
        ba_type = self.__get_int_float_type(data)
        encdict = {b"kind": b"ByteArray", b"type": ba_type}
        fmt = self.struct_map[ba_type]
        # All data is encoded little-endian in bcif
        return struct.pack("<" + fmt * len(data), *data), encdict

    def deltaEncoder(self, data):
        """Encode an integer array as an array of consecutive differences."""
        # Don't try to compress small arrays; the overhead of the compression
        # probably will exceed the space savings
        if len(data) <= 40:
            return data, None
        data_type = self.__get_int_float_type(data)
        encdict = {b"kind": b"Delta", b"origin": data[0], b"srcType": data_type}
        encdata = [0] + [data[i] - data[i - 1] for i in range(1, len(data))]
        return encdata, encdict

    def runLengthEncoder(self, data):
        """Encode an integer array as pairs of (value, number of repeats)"""
        # Don't try to compress small arrays; the overhead of the compression
        # probably will exceed the space savings
        if len(data) <= 40:
            return data, None
        data_type = self.__get_int_float_type(data)
        encdict = {b"kind": b"RunLength", b"srcType": data_type, b"srcSize": len(data)}
        encdata = []
        val = None
        for d in data:
            if d != val:
                if val is not None:
                    encdata.extend((val, repeat))  # noqa: F821
                val = d
                repeat = 1
            else:
                repeat += 1
        encdata.extend((val, repeat))
        # If we didn't save any space, return the original unchanged
        if len(encdata) > len(data):
            return data, None
        else:
            return encdata, encdict

    def encode(self, data, encoding):
        """Encode the data using the list of encodings, and return it."""
        encodingDictL = []
        for encType in encoding:
            if encType == "ByteArray":
                data, encDict = self.byteArrayEncoder(data)
            elif encType == "Delta":
                data, encDict = self.deltaEncoder(data)
            elif encType == "RunLength":
                data, encDict = self.runLengthEncoder(data)
            else:
                logger.info("unsupported encoding %r", encType)
            if encDict is not None:
                encodingDictL.append(encDict)
        return data, encodingDictL


class BinaryCifMaskedEncoders(object):
    """Base class for all encoders that handle potentially masked data"""

    def __init__(self):
        self.__boolmap = {False: "NO", True: "YES"}
        self.__unknown = [".", "?"]
        self.__defaultEncoding = "utf-8"
        self.__useByteEncoding = True
        self.__encP = BinaryCifEncoders()

    def encode(self, data, mask, encType):
        encData = []
        encodingDictL = []
        if encType == "StringArrayMasked":
            encData, encodingDictL = self.stringArrayMaskedEncoder(data, mask)
        elif encType == "IntArrayMasked":
            encData, encodingDictL = self.intArrayMaskedEncoder(data, mask)
        elif encType == "FloatArrayMasked":
            encData, encodingDictL = self.floatArrayMaskedEncoder(data, mask)
        else:
            logger.info("unsupported masked encoding %r", encType)
        return encData, encodingDictL

    def stringArrayMaskedEncoder(self, data, mask):
        _int_encoders = ["Delta", "RunLength", "ByteArray"]
        seen_substrs = {}  # keys are substrings, values indices
        sorted_substrs = []
        indices = []
        for i, reals in enumerate(data):
            if mask is not None and mask[i]:
                indices.append(-1)
            else:
                s = reals
                # Map bool to YES/NO strings
                if isinstance(s, bool):
                    s = self.__boolmap[s]
                else:
                    s = str(s)  # coerce non-str data to str
                if s not in seen_substrs:
                    seen_substrs[s] = len(seen_substrs)
                    sorted_substrs.append(s)
                indices.append(seen_substrs[s])
        offsets = [0]
        total_len = 0
        for s in sorted_substrs:
            total_len += len(s)
            offsets.append(total_len)

        data_offsets, enc_offsets = self.__encP.encode(offsets, _int_encoders)
        data_indices, enc_indices = self.__encP.encode(indices, _int_encoders)

        enc_dict = {
            b"kind": b"StringArray",
            b"dataEncoding": enc_indices,
            b"stringData": self.__toBytes("".join(sorted_substrs)),
            b"offsetEncoding": enc_offsets,
            b"offsets": data_offsets,
        }
        return data_indices, [enc_dict]

    def intArrayMaskedEncoder(self, data, mask):
        _encoders = ["Delta", "RunLength", "ByteArray"]

        if mask:
            masked_data = [-1 if m else d for m, d in zip(mask, data)]
        else:
            masked_data = data
        encdata, encoders = self.__encP.encode(masked_data, _encoders)
        return encdata, encoders

    def floatArrayMaskedEncoder(self, data, mask):
        _encoders = ["ByteArray"]

        if mask:
            masked_data = [0.0 if m else d for m, d in zip(mask, data)]
        else:
            masked_data = data
        encdata, encoders = self.__encP.encode(masked_data, _encoders)
        return encdata, encoders

    def getMask(self, data):
        """Create a mask list identifying missing/omitted values in `data`
        0 = Value is present, 1 = '.' = value not specified, and 2 = '?' = value unknown

        Only return a mask if there some incompleteness in the input data
        """
        mask = None
        for ii, colVal in enumerate(data):
            if colVal is not None and colVal not in self.__unknown:
                continue
            if not mask:
                mask = [0] * len(data)
            mask[ii] = 2 if colVal is None or colVal == "?" else 1
        return mask

    def get_mask_and_type(self, data):
        """Detect missing/omitted values in `data` and determine the type of
        the remaining values (str, int, float)
            * 0 = Value is present
            * 1 = . = value not specified
            * 2 = ? = value unknown
        """
        mask = None
        seen_types = set()
        for i, val in enumerate(data):
            if val is None or val in self.__unknown:
                if mask is None:
                    mask = [0] * len(data)
                mask[i] = 1 if val is None else 2
            else:
                seen_types.add(type(val))
        # If a mix of types, coerce to that of the highest precendence
        # (mixed int/float can be represented as float; mix int/float/str can
        # be represented as str; bool is represented as str)
        if not seen_types or bool in seen_types or str in seen_types:
            return mask, str
        elif float in seen_types:
            return mask, float
        elif int in seen_types:
            return mask, int
        elif sys.version_info[0] < 3 and long in seen_types:  # noqa: F821
            # Handle long like int (we don't have a 64-bit int type in BCIF anyway,
            # so hopefully the data can be represented in an int)
            return mask, int
        for t in seen_types:
            # Handle numpy float types like Python float
            # todo: this is a hack
            if "numpy.float" in str(t):
                return mask, float
        raise ValueError("Cannot determine type of data %s" % data)

    def __toBytes(self, strVal):
        try:
            return strVal.encode(self.__defaultEncoding) if self.__useByteEncoding else strVal
        except (UnicodeDecodeError, AttributeError):
            logger.exception("Bad type for %r", strVal)
            return strVal
